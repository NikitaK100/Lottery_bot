from aiogram import types
from random import randint
from data.config import admins
from keyboard.inline.admin_keyboard.admin_keyboard import keyboard_admin
from keyboard.inline.admin_keyboard.keyboard_start_lottery import keyboard_start_lottery
from loader import dp, bot
from states.start_lottery import StartLottery
from aiogram.dispatcher.storage import FSMContext
from utils.db_api.schemas import commands_lottery as db3
from utils.db_api.schemas import lottery_participants as db4
import secrets
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData


data_winner = CallbackData('who_winner', 'key', 'lottery_id')


async def get_keyboard_list_lotterys(key='lottery_id', lottery_id: str='0'):

    list_participants_all_lotterys = [{'id': list_participants.id, 
                                       'name': list_participants.name} for  list_participants 
                                       in await db3.select_all()]


    markup = InlineKeyboardMarkup(row_width=1)
    for number_lottery in list_participants_all_lotterys:
        lottery_id = number_lottery
        markup.insert(
            InlineKeyboardButton(
                text=number_lottery['name'],
                callback_data=data_winner.new(key=key, lottery_id=lottery_id['id'])
            )
        )
    markup.insert(
            InlineKeyboardButton(
                text='–ù–∞–∑–∞–¥',
                callback_data='back_admin_menu')
            )
    return markup


@dp.callback_query_handler(user_id=admins, text='winner')
async def select_lottery_who_winner(call: types.CallbackQuery):
    await call.answer()
    await call.message.edit_text("–í—ã–±–∏—Ä–∏—Ç–µ –ª–æ—Ç–µ—Ä–µ—é –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏:", reply_markup=await get_keyboard_list_lotterys())
    await StartLottery.get_number_lottery.set()


@dp.callback_query_handler(data_winner.filter(key='lottery_id'), state=StartLottery.get_number_lottery)
async def get_data(call: types.CallbackQuery, state: FSMContext, callback_data: dict):
    await call.answer()
    number_lottery = int(callback_data.get('lottery_id'))
    count = await db4.count_users(lottery_id=number_lottery)
    data_db_3 = await db3.select_id_lottery(id=number_lottery)

    await state.update_data(
        {
            'id_lottery': number_lottery
        }
    )

    await call.message.edit_text(f'–õ–æ—Ç–µ—Ä–µ—è ‚Ññ{number_lottery}\n'
                        f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª_–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {data_db_3.quantity}\n'
                        f'–ù–∞–±—Ä–∞–Ω–æ: {count}',
                        reply_markup=keyboard_start_lottery)
    await StartLottery.select_winner.set()


@dp.callback_query_handler(text='delete_lottery', state=StartLottery.select_winner)
async def delete_lottery(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    await db3.delete_lottery(id=data.get('id_lottery'))
    await call.message.edit_text('<b>–õ–æ—Ç–µ—Ä–µ—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞</b>\n\n'
                                 f'üôã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{call.from_user.full_name}</b>\n\n'
                                 f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–Ω–µ–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
                                '–í—ã–±–∏—Ä–µ—Ç–µ, –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:',
                                reply_markup=keyboard_admin)
    await state.reset_state()


@dp.callback_query_handler(user_id=admins, text='start_lottery', state=StartLottery.select_winner)
async def select_winner_lottery(call: types.CallbackQuery, state: FSMContext):

    await call.answer()

    data_lottery = await state.get_data()
    lottery_id_from_state = data_lottery.get('id_lottery')
    cycle = await db4.select_all_lottery_users(lottery_id=lottery_id_from_state)
    count = await db4.count_users(lottery_id=lottery_id_from_state)
    list_participants = []
    select_random_winner = randint(0, count-1)           

    for names in cycle:
        list_participants.append([names.name, names.id])

    await call.message.answer(f'–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n'
                              f'{tuple(list_participants)}')

    winner = list_participants[select_random_winner]

    create_code = secrets.token_hex(8)                                       # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ –∏–∑ 8 —Å–∏–º–≤–≤–æ–ª–æ–≤ –Ω–∞–∑–≤–∞–≤ –∫–æ—Ç–æ—Ä—ã–π, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑

    await call.message.answer(f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:\n'                                # –≥–æ–≤–æ—Ä–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∫—Ç–æ –ø–æ–±–µ–¥–∏–ª –∏ —Ç–æ–∫–µ–Ω 
                              f'{tuple(winner)}\n\n'
                              f'–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –≤—ã–π–≥—Ä—ã—à–∞: <b>{create_code}</b>')
    # –æ—Ç–ø—Ä–∞–≤–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ(–ø–æ id) –Ω–∞—à–µ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é 
    await bot.send_message(chat_id=winner[1], text=f'–í—ã —Å—Ç–∞–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –ª–æ—Ç–µ—Ä–µ–∏ ‚Ññ{lottery_id_from_state}ü§ë\n'
                                                   f'–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –≤—ã–π–≥—Ä—ã—à–∞: <b>{create_code}</b>ü§´\n\n'
                                                   f'–°–æ–æ–±—â–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –≤—ã–π–≥—Ä—ã—à\n'
                                                   f'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @Aki_256')
    await db3.delete_lottery(id=int(lottery_id_from_state))
    await state.finish()


@dp.callback_query_handler(user_id=admins, text='back_admin_menu', state=StartLottery)
async def exit(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await state.reset_state()
    await call.message.edit_text(f'üôã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>{call.from_user.full_name}</b>\n\n'
                              f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø–∞–Ω–µ–ª–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n'
                              '–í—ã–±–∏—Ä–µ—Ç–µ, –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π:',
                              reply_markup=keyboard_admin)


