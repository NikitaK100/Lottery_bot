from aiogram import types
from keyboard.inline.keyboard_account import keyboard_add_money
from loader import dp, bot
from utils.db_api.schemas import commands_lottery as db3
from utils.db_api.schemas import quick_commands as db2
from aiogram.utils.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.types.input_media import InputMedia
from keyboard.inline.keyboards_mixin import confirm_keyboards

data_key = CallbackData('paginator', 'key', 'page')

# –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä –ª–æ—Ç–µ—Ä–µ–π 


async def max_page():
    count = await db3.count_lottery()
    return count


async def get_page(number_page):
    cards = await db3.select_id()
    list_lottery = [[] for lottery in range(await max_page())]   # —Å–æ–∑–¥–∞—é –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∏—Ö –∫–æ–ª-–≤–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª-–≤–∞ –ª–æ—Ç–µ—Ä–µ–π
    number = 0
    for card in cards:                                           # –ø–µ—Ä–µ–±—Ä–∞–ª —Å–ø–∏—Å–æ–∫ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ 
        list_lottery[number].append(card.name)
        list_lottery[number].append(card.description)
        list_lottery[number].append(card.price)
        list_lottery[number].append(card.photo)
        number += 1                                              # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≤–ª–æ–∂–µ–Ω—ã–º —Å–ø–∏—Å–∫–∞–º 
    text = f'<b>{list_lottery[number_page][0]}</b>\n\n {list_lottery[number_page][1]}\n\n–¶–µ–Ω–∞: {list_lottery[number_page][2]}ü™ô'
    photo = f'{list_lottery[number_page][3]}'
    return {'text': text, 'photo': photo}    


async def get_id(index):
    '''
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω–¥–µ–∫—Å(–≤ –±—É–¥—É—â–µ–º index=curren_page) –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∏ –æ—Ç–¥–∞—ë—Ç id –ª–æ—Ç–µ—Ä–µ–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ 
    '''                  
    db_id = await db3.select_id()
    list_id = []
    for data_id in db_id:
        list_id.append(data_id.id)
    return list_id[index]


async def get_keyboard_page(max_pages: int, key='book',  page: int = 0):

    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–ª–∞–≤–∏—Ç—É—Ä—É(–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
    –∏ —Å–≤—è–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å CallbackData,
    –∫ –Ω–∏–º —É–¥–æ–±–Ω–æ –æ–±—Ä–∞—â–∞—Ç—Å—è –≤ –±—É–¥—É—â–µ–º
    """

    previous_page = page - 1
    previous_text = '<<<'

    current_text = '‚úÖ–í—ã–±—Ä–∞—Ç—å'

    next_page = page + 1
    next_text = '>>>'

    markup = InlineKeyboardMarkup()

    if previous_page > -1:          
        markup.insert(
            InlineKeyboardButton(
                text=previous_text,
                callback_data=data_key.new(key=key, page=previous_page)
            )
        )

    markup.insert(
        InlineKeyboardButton(
            text=current_text,
            callback_data=data_key.new(key=key, page=f'{await get_id(page)}')  # –ø–æ–ª—É—á–∏–ª–∏ id –ª–æ—Ç–µ—Ä–µ–∏ 
        )
    )

    if next_page < max_pages:
        markup.insert(
            InlineKeyboardButton(
                text=next_text,
                callback_data=data_key.new(key=key, page=next_page)
            )
        )

    markup.insert(
        InlineKeyboardButton(
            text='–ì–ª–∞–≤–Ω–∞—è',
            callback_data=data_key.new(key=key, page='back')
        )
    )

    return markup


@dp.callback_query_handler(data_key.filter(page='back'))
async def previous_level(call: types.CallbackQuery):
    await call.answer()
    user_id = call.from_user.id
    name = call.from_user.full_name
    wallet = await db2.select_user(id=user_id)
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await call.message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å <b>{name}</b>\n\n'
                                f'–ë–∞–ª–∞–Ω—Å: <b>{wallet.wallet}</b> –º–æ–Ω–µ—Ç \n\n'
                                f'üîª–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—åüîª',
                                reply_markup=keyboard_add_money)


@dp.callback_query_handler(text='lottery')
async def everything(call: types.CallbackQuery):
    card_lottery = await get_page(0)
    keyboard = await get_keyboard_page(await max_page())
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.send_photo(chat_id=call.message.chat.id, photo=card_lottery['photo'], 
    caption=card_lottery['text'], reply_markup=keyboard)


@dp.callback_query_handler(data_key.filter(key='book'))
async def all_requests(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer()
    current_page = int(callback_data.get('page'))
    if current_page > 1000:                              # –µ—Å–ª–∏ –≤ current_page –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 1000 —Ç–æ–≥–¥–∞ —ç—Ç–æ –Ω–æ–º–µ—Ä –ª–æ—Ç–µ—Ä–µ–∏
        await state.update_data(                         # P.S. –∫–∞–∂–¥–∞—è –ª–æ—Ç–µ—Ä–µ—è –∏–º–µ–µ—Ç —Å–≤–æ–π –∏–Ω–¥–µ–∫—Å(–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
            {
                'client_id': call.from_user.id,
                'lottery_id': current_page
            }
        )
        
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        await call.message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:',
                                 reply_markup=confirm_keyboards('buy', 'cancel_buy'))
        await state.set_state('buying_lottery')

    else:                                                
        card_lottery = await get_page(int(current_page))
        markup = await get_keyboard_page(max_pages=await max_page(), page=int(current_page))
        photo = InputMedia(type='photo', media=card_lottery['photo'], caption=card_lottery['text'])
        await call.message.edit_media(photo, markup)



    




